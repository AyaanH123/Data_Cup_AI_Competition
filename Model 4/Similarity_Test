import pickle
import pandas as pd
from statistics import mean
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

article_dataframe_main = pd.read_pickle('article_dataframe.pkl')
article_dataframe_main.set_index('ID', inplace=True)
train_dataframe_main = pd.read_pickle('train_dataframe.pkl')
x = train_dataframe_main.index.values.tolist()
y = article_dataframe_main.index.values.tolist()
import re, math
from collections import Counter

WORD = re.compile(r'\w+')

def get_cosine(vec1, vec2):
     intersection = set(vec1.keys()) & set(vec2.keys())
     numerator = sum([vec1[x] * vec2[x] for x in intersection])

     sum1 = sum([vec1[x]**2 for x in vec1.keys()])
     sum2 = sum([vec2[x]**2 for x in vec2.keys()])
     denominator = math.sqrt(sum1) * math.sqrt(sum2)

     if not denominator:
        return 0.0
     else:
        return float(numerator) / denominator

def text_to_vector(text):
     words = WORD.findall(text)
     return Counter(words)

def cosine_sim(text1, text2):
    text1 = str(text1)
    text2 = str(text2)
    vector1 = text_to_vector(text1)
    vector2 = text_to_vector(text2)

    cosine = get_cosine(vector1, vector2)

    return cosine

def correlation(m):
    m = int(m)
    claim = train_dataframe_main.loc[x[m], 'claim']
    label = train_dataframe_main.loc[x[m], 'label']
    articles_list = []
    cosine_list = []
    for i in train_dataframe_main.loc[x[m], 'related_articles']:
        article1 = article_dataframe_main.loc[str(i), 'Content']
        articles_list.append(article1)
    for value in articles_list:
        cosine_list.append(cosine_sim(claim, value))

    return claim, label, cosine_list

list1 = []
list2 = []
list3 = []
for i in range(0, 50):
    claim, label, cosine_list = correlation(i)
    listx = []
    if label == int(0):
        listx.append(claim)
        listx.append(label)
        listx.append(cosine_list)
        list1.append(listx)
    elif label == int(1):
        listx.append(claim)
        listx.append(label)
        listx.append(cosine_list)
        list2.append(listx)
    elif label == int(2):
        listx.append(claim)
        listx.append(label)
        listx.append(cosine_list)
        list3.append(listx)
correlation = []
correlation1 = []
correlation2 = []
for value in list1:
    correlation.append(value[2])
for value in list2:
    correlation1.append(value[2])
for value in list3:
    correlation2.append(value[2])
print(correlation)
print(correlation1)
print(correlation2)
#0.18740196267541342
